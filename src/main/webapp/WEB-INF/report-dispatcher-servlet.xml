<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
">
    <!-- mvc -->
    
    <!-- direct mapping of resources without a controller -->
    <mvc:resources location="/WEB-INF/resources/img" mapping="/resources/img/**" />
    <mvc:resources location="/WEB-INF/resources/js" mapping="/resources/js/**" />
    <mvc:resources location="/WEB-INF/resources/css" mapping="/resources/css/**" />
    
    <!-- Flip on all Spring MVC features or annotations: JSR-303, message conversion,
    field formatting. 
    "With this minimal configuration, anytime a @Valid @Controller input is encountered,
    it will be validated by the JSR-303 provider. JSR-303, in turn, will enforce any
    constraints declared against the input. Any ConstraintViolations will automatically
    be exposed as errors in the BindingResult renderable by standard Spring MVC form tags. "
    -->
    <mvc:annotation-driven />

    <!-- duplicate previous
    Spring 3.1 introduced a new set of support classes for @RequestMapping methods
    called RequestMappingHandlerMapping and RequestMappingHandlerAdapter respectively.
    They are recommended for use and even required to take advantage of new features
    in Spring MVC 3.1 and going forward. The new support classes are enabled by 
    default by the MVC namespace and the MVC Java config but must be configured 
    explicitly if using neither. This section describes a few important differences
    between the old and the new support classes. 
    
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />   
    -->
    
    <!-- issue: include or not -->
    <tx:annotation-driven />
    
    <context:component-scan base-package="sp" />
    
    <!-- Velocity integration -->
    <bean id="velocityConfig"
          class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath" value="/WEB-INF/views/" />
        <property name="configLocation">
            <value>/WEB-INF/velocity.properties</value>
        </property>
    </bean>
	 
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver">
        <!--cache=true for production -->
        <property name="cache" value="false" />
        <property name="prefix" value="" />
        <property name="layoutUrl" value="layout.vm"/>
        <property name="suffix" value=".vm" />
        <!--<property name="toolboxConfigLocation" value="/WEB-INF/velocity/toolbox.xml"/>-->
        <property name="exposeSpringMacroHelpers" value="true" />
        <property name="contentType" value="text/html;charset=UTF-8" />        
        <!-- instead of default VelocityLayoutServlet -->
        <property name="viewClass" value="org.springframework.web.servlet.view.velocity.VelocityLayoutView" />
    </bean>
    
    <!-- Internationalization -->    
    <bean id="messageSource"
          class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename" value="classpath:i18n/messages" />
        <property name="defaultEncoding" value="UTF-8" />
    </bean>

    <!-- Interceptor that allows for changing the current locale on every request,
    via a configurable request parameter. 
    -->
    <bean id="localeChangeInterceptor"
          class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
        <!-- request parameter which specifies a locale -->
        <property name="paramName" value="lang" />
    </bean>

    <!--  LocaleResolver implementation that uses a cookie sent back to the user 
    in case of a custom setting, with a fallback to the specified default locale
    or the request's accept-header locale.

    This is particularly useful for stateless applications without user sessions.  
    -->
    <bean id="localeResolver"
          class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="defaultLocale" value="en" />
    </bean>

    
    <bean id="handlerMapping"
          class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
        <property name="interceptors">
            <ref bean="localeChangeInterceptor" />
        </property>
    </bean>
    
    <!-- Configures Handler Interceptors -->    
<!--    <mvc:interceptors>  
         Changes the locale when a 'locale' request parameter is sent   
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>  
    </mvc:interceptors>  -->
    
    <!--
    Most controllers will use the ControllerClassNameHandlerMapping above, but
    for the index controller we are using ParameterizableViewController, so we must
    define an explicit mapping for it.
    -->
    <!--    <bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="mappings">
            <props>
                <prop key="index.vm">indexController</prop>
            </props>
        </property>
    </bean>-->

    <!-- default view resolver -->
    <!--<bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:prefix="/WEB-INF/jsp/"
          p:suffix=".jsp" />
    -->

    <!--
    The index controller.
    -->
    <!--    <bean name="indexController"
    class="org.springframework.web.servlet.mvc.ParameterizableViewController"
    p:viewName="index" />-->

    <!-- multipart resolver -->                
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
          p:maxUploadSize="500000"/>
 
    <!-- Saves a locale change using a cookie -->  
<!--    <bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver"   
          id="localeResolver" />  
  
    <bean class="org.springframework.context.support.ResourceBundleMessageSource"  
          id="messageSource">    
        <property name="basename" value="messages" />  
    </bean>-->

</beans>
