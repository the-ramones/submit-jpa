<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns="http://java.sun.com/xml/ns/javaee"
	 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	 version="3.0">
    <!-- Servlet 3.0 when web.xml is compelete -->
    <!-- metadata-complete="true"> -->
    <display-name>Report</display-name>
    <context-param>
        <description>Spring application context configuration file location</description>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/report-context.xml</param-value>
    </context-param>
    <listener>
        <description>Bootstrap listener to start up and shut down Spring's root WebApplicationContext</description>        
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--  Servlet 2.4+ listener that exposes the request to the current thread, 
        through both LocaleContextHolder and RequestContextHolder. To be registered
        as listener in web.xml.
        
        Alternatively, Spring's RequestContextFilter and Spring's DispatcherServlet
        also expose the same request context to the current thread. In contrast to
        this listener, advanced options are available there (e.g. "threadContextInheritable").

        This listener is mainly for use with third-party servlets, e.g. the JSF
        FacesServlet. Within Spring's own web support, DispatcherServlet's processing
        is perfectly sufficient.  -->
    <listener> 
        <description>Servlet 2.4+ listener that exposes the request to the current thread</description>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>   
    </listener>
    <servlet>
        <servlet-name>report-dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>2</load-on-startup>
    </servlet>
    <!--The url-pattern specification:
        A string beginning with a ‘/’ character and ending with a ‘/*’ suffix is 
            used for path mapping.
        A string beginning with a ‘*.’ prefix is used as an extension mapping.
        A string containing only the ’/’ character indicates the "default" servlet
            of the application. In this case the servlet path is the request URI 
            minus the context path and the path info is null.
        All other strings are used for exact matches only. Advice "/" generic path
    -->
    <servlet-mapping>
        <servlet-name>report-dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
        <!-- Need a dispatcher-servlet.xml context config file. By convention-over-configuration
        principle it will be  "[servlet-name]+servlet.xml" in WEB-INF/classpath 
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:report-mvc.xml</param-value>
        </init-param>
        -->
    </servlet-mapping>
    <session-config>        
        <session-timeout>
            30
        </session-timeout>
    </session-config>
    <welcome-file-list>
        <welcome-file>redirect.jsp</welcome-file>
    </welcome-file-list>
    
    <!-- Error pages -->
    <error-page>
        <error-code>404</error-code> 
        <location>/missing.html</location> 
    </error-page> 
    <error-page> 
        <error-code>403</error-code> 
        <location>/access.html</location> 
    </error-page> 
    <error-page> 
        <error-code>500</error-code> 
        <location>/error.html</location> 
    </error-page>
    <!-- 
        Servlet 2.3/2.4 Filter that allows one to specify a character encoding
     for requests. This is useful because current browsers typically do not set 
     a character encoding even if specified in the HTML page or form.

        This filter can either apply its encoding if the request does not already 
     specify an encoding, or enforce this filter's encoding in any case 
     ("forceEncoding"="true"). In the latter case, the encoding will also be 
     applied as default response encoding on Servlet 2.4+ containers (although 
     this will usually be overridden by a full content type set in the view).
    -->
    <filter>
        <filter-name>utf8CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>        
    </filter>
    
    <filter-mapping>
        <filter-name>utf8CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
<!--    
    <filter>
    <filter-name>springSecurityFilterChain</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
</filter>
<filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
<welcome-file-list>
    <welcome-file>login</welcome-file>
</welcome-file-list>-->
</web-app>
